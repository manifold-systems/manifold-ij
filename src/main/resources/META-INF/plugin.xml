<!--
  ~ /*
  ~  * Copyright (c) 2022 - Manifold Systems LLC
  ~  *
  ~  * Licensed under the Apache License, Version 2.0 (the "License");
  ~  * you may not use this file except in compliance with the License.
  ~  * You may obtain a copy of the License at
  ~  *
  ~  *       http://www.apache.org/licenses/LICENSE-2.0
  ~  *
  ~  * Unless required by applicable law or agreed to in writing, software
  ~  * distributed under the License is distributed on an "AS IS" BASIS,
  ~  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~  * See the License for the specific language governing permissions and
  ~  * limitations under the License.
  ~  */
  ~
  -->

<idea-plugin>
  <id>manifold.ij</id>
  <name>Manifold</name>
  <description>
    <![CDATA[
<p>Manifold is a Java compiler plugin. It supplements Java with:</p>
<ul>
  <li>Direct, <i>type-safe</i> access to:</li>
  <ul>
    <li><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-graphql">GraphQL</a> schemas, queries, etc.</li>
    <li><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-json">JSON & JSON Schema</a>, <a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-yaml">YAML</a>, <a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-xml">XML</a>
    <li><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-csv">CSV</a></li>
    <li><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-js">JavaScript</a></li>
    <li>etc.</li>
  </ul>
  <li><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-ext">Extension Methods</a></li>
  <li><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-props">Properties</a></li>
  <li><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-ext#operator-overloading">Operator Overloading</a></li>
  <li><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-ext#unit-expressions">Unit Expressions</a></li>
  <li><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-templates">A <em>Java</em> Template Engine</a></li>
  <li><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-preprocessor">A Preprocessor</a></li>
  <li>...and more</li>
</ul>
<p>All fully supported in <strong>Java 8 - 17</strong> with comprehensive IDE support in <strong>IntelliJ IDEA</strong> and <strong>Android Studio</strong>.
Manifold consists of a set of modules, one for each feature. Simply add the Manifold dependencies of your choosing to your existing project and begin taking advantage of them.</p>
<blockquote>
  <p><em><strong>New!</strong></em></p>
  <strong>Properties for Java!</strong>
  <pre><code class="java">
    <b>public interface</b> Book {
      <b>@var</b> String title; // automatically builds private field & accessors for you
    }
    // refer to it directly by name
    book.title = &quot;Daisy&quot;;     // calls setter
    String name = book.title; // calls getter
    book.title += &quot; chain&quot;;   // calls getter & setter
  </code></pre>
  <a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-props">Learn more</a>.
</blockquote>
<h2><a href="#what-can-you-do-with-manifold" id="what-can-you-do-with-manifold">What can you do with Manifold?</a></h2>
<h3><a href="#meta-programming" id="meta-programming"><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-core-parent/manifold">Meta-programming</a></a></h3>
<p>Use the framework to gain direct, type-safe access to <em>any</em> type of resource, such as
<a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-graphql"><strong>GraphQL</strong></a>,
<a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-json"><strong>JSON</strong></a>,
<a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-xml"><strong>XML</strong></a>,
<a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-yaml"><strong>YAML</strong></a>,
<a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-csv"><strong>CSV</strong></a>, and even
other languages such as <a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-js"><strong>JavaScript</strong></a>.
Remove the code gen step in your build process.</p>
<p><strong>GraphQL:</strong> Use types defined in .graphql files <em>directly</em>, no code gen steps! Make GraphQL changes and immediately use
them with code completion.</p>
<pre><code class="java">var query = MovieQuery.builder(Action).build();
var result = query.request(&quot;http://com.example/graphql&quot;).post();
var actionMovies = result.getMovies();
for (var movie : actionMovies) {
  out.println(
    &quot;Title: &quot; + movie.getTitle() + &quot;\n&quot; +
    &quot;Genre: &quot; + movie.getGenre() + &quot;\n&quot; +
    &quot;Year: &quot; + movie.getReleaseDate().getYear() + &quot;\n&quot;);
}
</code></pre>
<p><strong>JSON:</strong> Use .json schema files directly and type-safely, no code gen steps! Find usages of .json properties in your
Java code.</p>
<pre><code class="java">// From User.json
User user = User.builder(&quot;myid&quot;, &quot;mypassword&quot;, &quot;Scott&quot;)
  .withGender(male)
  .withDob(LocalDate.of(1987, 6, 15))
  .build();
User.request(&quot;http://api.example.com/users&quot;).postOne(user);
</code></pre>
<h3><a href="#extension-methods" id="extension-methods"><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-ext">Extension Methods</a></a></h3>
<p>Add your own methods to existing Java classes, even <em>String</em>, <em>List</em>, and <em>File</em>. Eliminate boilerplate code.
</p>
<pre><code class="java">String greeting = &quot;hello&quot;;
greeting.myMethod(); // Add your own methods to String!
</code></pre>
<h3><a href="#operator-overloading" id="operator-overloading"><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-ext#operator-overloading">Operator Overloading</a></a></h3>
<p>Implement <em>operator</em> methods on any type to directly support arithmetic, relational, and unit operators.</p>
<pre><code class="java">// BigDecimal expressions
if (bigDec1 &gt; bigDec2) {
  BigDecimal result = bigDec1 + bigDec2;
  ...
}
// Implement operators for any type
MyType value = myType1 + myType2;
</code></pre>
<h3><a href="#unit-expressions" id="unit-expressions"><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-ext#unit-expressions">Unit Expressions</a></a></h3>
<p>Unit or <em>binding</em> operations are unique to the Manifold framework. They provide a powerfully concise syntax and can be
applied to a wide range of applications.</p>
<pre><code class="java">import static manifold.science.util.UnitConstants.*; // kg, m, s, ft, etc
...
Length distance = 100 mph * 3 hr;
Force f = 5.2 kg m/s/s; // same as 5.2 N
Mass infant = 9 lb + 8.71 oz;
</code></pre>
<h3><a href="#ranges" id="ranges"><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-collections#ranges">Ranges</a></a></h3>
<p>Easily work with the <em>Range</em> API using <a href="(https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-ext#unit-expressions)">unit expressions</a>.
Simply import the <em>RangeFun</em> constants to create ranges.</p>
<pre><code class="java">// imports the `to`, `step`, and other &quot;binding&quot; constants
import static manifold.collections.api.range.RangeFun.*;
...
for (int i: 1 to 5) {
  out.println(i);
}

for (Mass m: 0kg to 10kg step 22r unit g) {
  out.println(m);
}
</code></pre>
<h3><a href="#science" id="science"><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-science">Science</a></a></h3>
<p>Use the <a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-science">manifold-science</a>
framework to type-safely incorporate units and precise measurements into your applications.</p>
<pre><code class="java">import static manifold.science.util.UnitConstants.*; // kg, m, s, ft, etc.
...
Velocity rate = 65mph;
Time time = 1min + 3.7sec;
Length distance = rate * time;
</code></pre>
<h3><a href="#preprocessor" id="preprocessor"><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-preprocessor">Preprocessor</a></a></h3>
<p>Use familiar directives such as <strong>#define</strong> and <strong>#if</strong> to conditionally compile your Java projects. The preprocessor offers
a simple and convenient way to support multiple build targets with a single codebase. </p>
<pre><code class="java">#if JAVA_8_OR_LATER
  @Override
  public void setTime(LocalDateTime time) {...)
#else
  @Override
  public void setTime(Calendar time) {...}
#endif
</code></pre>
<h3><a href="#structural-typing" id="structural-typing"><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-ext#structural-interfaces-via-structural">Structural Typing</a></a></h3>
<p>Unify disparate APIs. Bridge software components you do not control. Access maps through type-safe interfaces. </p>
<pre><code class="java">Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();
MyThingInterface thing = (MyThingInterface) map; // O_o
thing.setFoo(new Foo());
Foo foo = thing.getFoo();
out.println(thing.getClass()); // prints &quot;java.util.HashMap&quot;
</code></pre>
<h3><a href="#type-safe-reflection" id="type-safe-reflection"><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-ext#type-safe-reflection-via-jailbreak">Type-safe Reflection</a></a></h3>
<p>Access private features with <b>@Jailbreak</b> to avoid the drudgery and vulnerability of Java reflection. </p>
<pre><code class="java">@Jailbreak Foo foo = new Foo();
// Direct, *type-safe* access to *all* foo's members
foo.privateMethod(x, y, z);
foo.privateField = value;
</code></pre>
<h3><a href="#checked-exception-handling" id="checked-exception-handling"><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-exceptions">Checked Exception Handling</a></a></h3>
<p>You now have an option to make checked exceptions behave like unchecked exceptions!  No more unintended exception
swallowing. No more <em>try</em>/<em>catch</em>/<em>wrap</em>/<em>rethrow</em> boilerplate!</p>
<pre><code class="java">List&lt;String&gt; strings = ...;
List&lt;URL&gt; urls = list
  .map(URL::new) // No need to handle the MalformedURLException!
  .collect(Collectors.toList());
</code></pre>
<h3><a href="#string-templates" id="string-templates"><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-strings">String Templates</a></a></h3>
<p>Embed variables and expressions in String literals, no more clunky string concat! </p>
<pre><code class="java">int hour = 15;
// Simple variable access with '$'
String result = &quot;The hour is $hour&quot;; // Yes!!!
// Use expressions with '${}'
result = &quot;It is ${hour &gt; 12 ? hour-12 : hour} o'clock&quot;;
</code></pre>
<h3><a href="#a-java-template-engine" id="a-java-template-engine"><a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-templates">A <em>Java</em> Template Engine</a></a></h3>
<p>Author template files with the full expressive power of Java, use your templates directly in your code as types.
Supports type-safe inclusion of other templates, shared layouts, and more. </p>
<pre><code class="java">List&lt;User&gt; users = ...;
String content = abc.example.UserSample.render(users);
</code></pre>
<p>A template file <em>abc/example/UserSample.html.mtl</em></p>
<pre><code class="html">&lt;%@ import java.util.List %&gt;
&lt;%@ import com.example.User %&gt;
&lt;%@ params(List&lt;User&gt; users) %&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;body&gt;
&lt;% users.stream()
   .filter(user -&gt; user.getDateOfBirth() != null)
   .forEach(user -&gt; { %&gt;
    User: ${user.getName()} &lt;br&gt;
    DOB: ${user.getDateOfBirth()} &lt;br&gt;
&lt;% }); %&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
    ]]>
  </description>
  <version>This value is patched by the build script</version>
  <vendor email="admin@manifold.systems" url="http://manifold.systems">Manifold</vendor>
  <!-- please see http://confluence.jetbrains.com/display/IDEADEV/Build+Number+Ranges for description -->
  <idea-version since-build="This value is patched by the build script"/>

  <depends>com.intellij.modules.java</depends>

  <!-- no longer a paid plugin -->
  <!--  <product-descriptor code="PMANIFOLD" optional="true" release-date="20200212" release-version="20201"/>-->

  <change-notes>
    <![CDATA[
<h3>Change notes:</h3>
<h4>
<br>
<a href="https://github.com/manifold-systems/manifold/issues/467">#467</a>: IntelliJ plugin: support error/warning highlights in fragments (in prep for manifold-sql)
<br>
<a href="https://github.com/manifold-systems/manifold/issues/466">#466</a>: IntelliJ plugin: Deprecated class usage results in compilation error in IntelliJ IDEA
<br>
<a href="https://github.com/manifold-systems/manifold/issues/451">#451</a>: IntelliJ plugin: Invalid warning message re older manifold version in project than in intellij plugin
<br>
<a href="https://github.com/manifold-systems/manifold/issues/449">#449</a>: Remedy a java symbol resolve issue where a field and an inner class share the same name
<br>
<a href="https://github.com/manifold-systems/manifold/issues/446">#446</a>: Use MathContext.128 for big decimal division
<br>
<a href="https://github.com/manifold-systems/manifold/issues/436">#436</a>: Fix mapstruct handling of default interface methods
<br>
<a href="https://github.com/manifold-systems/manifold/issues/422">#422</a>: Fix self type bug with arrays
<br>
<a href="https://github.com/manifold-systems/manifold/issues/423">#423</a>: Add support for forwarding and delegation
<br>
<a href="https://github.com/manifold-systems/manifold/issues/421">#421</a>: IntelliJ plugin: auto, like var, should be highlighted as a keyword
<br>
<a href="https://github.com/manifold-systems/manifold/issues/418">#418</a>: Compiling from IntelliJ can cause UnsupportedClassVersionError using the preprocessor and using pre-JDK 17
<br>
<a href="https://github.com/manifold-systems/manifold/issues/417">#417</a>: Class cannot be converted Issue
<br>
<a href="https://github.com/manifold-systems/manifold/issues/416">#416</a>: Unqualified static varargs extension method call results in compiler error
<br>
<a href="https://github.com/manifold-systems/manifold/issues/414">#414</a>: Using JDK 17+ in preview mode + using an annotation processor causes NPE
<br>
<a href="https://github.com/manifold-systems/manifold/issues/412">#412</a>: "Variable expected" error involving multidimensional index operator in assignment
<br>
<a href="https://github.com/manifold-systems/manifold/issues/411">#411</a>: Intermittent "Incorrect CachedValue use" errors
<br>
<a href="https://github.com/manifold-systems/manifold/issues/400">#400</a>: Support getter/setter extension methods as property access for manifold-props
<br>
<a href="https://github.com/manifold-systems/manifold/issues/409">#409</a>: Intellij plugin: fix generic extension method type parameter inference regression
<br>
<a href="https://github.com/manifold-systems/manifold/issues/408">#408</a>: Support Valhalla EA Jdk releases
<br>
<a href="https://github.com/manifold-systems/manifold/issues/407">#407</a>: Fix compile error using latest JDK 20 EA release (build 28)
<br>
<a href="https://github.com/manifold-systems/manifold/issues/406">#406</a>: IntelliJ plugin: "Incorrect CachedValue use:" errors reported with property and extension caching
<br>
<a href="https://github.com/manifold-systems/manifold/issues/405">#405</a>: IntelliJ plugin: many issues in latest 2022.3 release with renaming files/elements, other related issues
<br>
<a href="https://github.com/manifold-systems/manifold/issues/404">#404</a>: Using ReflectUtil with JDK 19 cannot set value on static final field on an interface
<br>
<a href="https://github.com/manifold-systems/manifold/issues/403">#403</a>: Extension methods on inner classes not working in some cases
<br>
<a href="https://github.com/manifold-systems/manifold/issues/402">#402</a>: IntelliJ plugin: Exception when using tuple expressions without adding manifold-tuple/manifold-tuple-rt
<br>
<a href="https://github.com/manifold-systems/manifold/issues/396">#396</a>: Handle expression in foreach stmt where the expression type structurally implements Iterator and a class extension exists that makes Iterable structural
<br>
<a href="https://github.com/manifold-systems/manifold/issues/395">#395</a>: Support property inference on record types
<br>
<a href="https://github.com/manifold-systems/manifold/issues/394">#394</a>: Support EA release of JDK 20
<br>
<a href="https://github.com/manifold-systems/manifold/issues/393">#393</a>: Java 17+: fix $ escape char for string templates
<br>
<a href="https://github.com/manifold-systems/manifold/issues/392">#392</a>: Cast as raw generic type
<br>
<a href="https://github.com/manifold-systems/manifold/issues/387">#387</a>: Tree is null for module-info file, do not process
<br>
<a href="https://github.com/manifold-systems/manifold/issues/380">#380</a>: Fix regression involving fields as structurally equivalent to get/set methods
<br>
<a href="https://github.com/manifold-systems/manifold/issues/382">#382</a>: Fix instanceof pattern matching issue related to parser changes in latest IntelliJ release
<br>
<a href="https://github.com/manifold-systems/manifold/issues/376">#376</a>: Support an explicit typed variable having an implicit typed initializer expression
<br>
<a href="https://github.com/manifold-systems/manifold/issues/375">#375</a>: Policy change: support only LTS versions of JDKs and the latest release
<br>
<a href="https://github.com/manifold-systems/manifold/issues/373">#373</a>: New Feature: multiple return types via `auto` and enhanced tuple expressions
<br>
<a href="https://github.com/manifold-systems/manifold/issues/372">#372</a>: New Feature: type-safe tuple expressions
<br>
<a href="https://github.com/manifold-systems/manifold/issues/371">#371</a>: New Feature: `auto` type inference for local vars, fields, and method return types
<br>
<a href="https://github.com/manifold-systems/manifold/issues/355">#355</a>: fix instanceof Pattern Matching within if-statement condition (Cannot Find Symbol)
<br>
<a href="https://github.com/manifold-systems/manifold/issues/351">#351</a>: Increment/decrement operators on properties cause compiler exception in Java 11+
<br>
<a href="https://github.com/manifold-systems/manifold/issues/349">#349</a>: Support non-public extension methods
<br>
<a href="https://github.com/manifold-systems/manifold/issues/348">#348</a>: @ThisClass extension method receiver, provides the calling class of static method
<br>
<a href="https://github.com/manifold-systems/manifold/issues/345">#345</a>: Allow Jailbreak to work when casting
<br>
<a href="https://github.com/manifold-systems/manifold/issues/338">#338</a>: fix ManTL template issues that have piled up with recent JetBrains platform updates
<br>
<a href="https://github.com/manifold-systems/manifold/issues/337">#337</a>: Support structural interface implementation via Extension Class without having to manually create an IProxyFactory service impl
<br>
<a href="https://github.com/manifold-systems/manifold/issues/336">#336</a>: IntelliJ plugin: performing a clean build from maven/gradle tool causes perpetual refresh in UI
<br>
<a href="https://github.com/manifold-systems/manifold/issues/334">#334</a>: handle case with ReflectUtil.invokeDefault() where the receiving default method has param type that is a structural interface
<br>
<a href="https://github.com/manifold-systems/manifold/issues/333">#333</a>: handle structural overload operator methods
<br>
<a href="https://github.com/manifold-systems/manifold/issues/332">#332</a>: fix issues with operator overloading relating to structural interfaces
<br>
<a href="https://github.com/manifold-systems/manifold/issues/290">#290</a>: address lag in intellij editor after adding errors
<br>
<a href="https://github.com/manifold-systems/manifold/issues/328">#328</a>: editing a graphql file in IntelliJ causes some graphql types not to resolve
<br>
<a href="https://github.com/manifold-systems/manifold/issues/329">#329</a>: 'Array index out of bounds' warning highlight in IJ editor for indexed access to Maps
<br>
<a href="https://github.com/manifold-systems/manifold/issues/330">#330</a>: NPE in IntelliJ inside fileOpenedSync() when manifold-props not in use
<br>
<a href="https://github.com/manifold-systems/manifold/issues/324">#324</a>: fix general lag in IJ editor after typing
<br>
<a href="https://github.com/manifold-systems/manifold/issues/327">#327</a>: fix conflict with preprocessor build.properties and environment symbols
<br>
<a href="https://github.com/manifold-systems/manifold/issues/326">#326</a>: Add a preprocessor SymbolProvider implementation for Android build variants
<br>
<a href="https://github.com/manifold-systems/manifold/issues/325">#325</a>: Building on Android Studio with Gradle 7.0.3 and Java 11 causes internal compiler errors
<br>
<a href="https://github.com/manifold-systems/manifold/issues/322">#322</a>: Add an SPI to augment the preprocessor's symbols dynamically
<br>
<a href="https://github.com/manifold-systems/manifold/issues/319">#319</a>: Fix IJ plugin regarding manifold preprocessor when only the preprocessor is in use
<br>
<a href="https://github.com/manifold-systems/manifold/issues/313">#313</a>: Fix default parameter values for graphql operations
<br>
<a href="https://github.com/manifold-systems/manifold/issues/101">#101</a>: Support multiple GraphQL schemas using .graphqlconfig files
<br>
<a href="https://github.com/manifold-systems/manifold/issues/306">#311</a>: IJ plugin: Fix psi cache exception caused by intellij internals using WrappedLexer
<br>
<a href="https://github.com/manifold-systems/manifold/issues/306">#306</a>: Support Java 17
<br>
<a href="https://github.com/manifold-systems/manifold/issues/290">#290</a>: IJ plugin: More performance-related changes targeting type resolution and completion
<br>
<a href="https://github.com/manifold-systems/manifold/issues/297">#297</a>: IJ plugin: Some features of manifold-ext and manifold-props leak through to modules not depending on these artifacts, in such cases avoid applying these code paths
<br>
<a href="https://github.com/manifold-systems/manifold/issues/290">#290</a>: IJ plugin: Improve performance while editing, particularly where code completion involves manifold extensions, also avoid irrelevant code paths where possible e.g., type resolution involving manifold-ext where it is not used
<br>
<a href="https://github.com/manifold-systems/manifold/issues/303">#303</a>: GQL Fields with Underscores producing incorrectly in 2021.1.23
<br>
<a href="https://github.com/manifold-systems/manifold/issues/302">#302</a>: "Access is allowed from event dispatch thread only" exception thrown occasionally in IntelliJ
<br>
<a href="https://github.com/manifold-systems/manifold/issues/301">#301</a>: GraphQL: Slim down generated source
<br>
<a href="https://github.com/manifold-systems/manifold/issues/300">#300</a>: CCE at runtime when structural interface having a method that returns a structural interface
<br>
<a href="https://github.com/manifold-systems/manifold/issues/296">#296</a>: AbstractMethodError using property syntax in an interface default method
<br>
<a href="https://github.com/manifold-systems/manifold/issues/295">#295</a>: Support compiler option to dump [pre]processed and/or generated manifold sources to disk
<br>
<a href="https://github.com/manifold-systems/manifold/issues/292">#292</a>: Compile with Java Operator Overloading inc() dec() error
<br>
<a href="https://github.com/manifold-systems/manifold/issues/288">#288</a>: Incompatible types. required: 'manifold.rt.api.anno.any[]'
<br>
<a href="https://github.com/manifold-systems/manifold/issues/283">#283</a>: Switch on Enum is probably broken IntelliJ Plugin
<br>
<a href="https://github.com/manifold-systems/manifold/issues/282">#282</a>: Manifold incompatible with Lombok val/var locals
<br>
<a href="https://github.com/manifold-systems/manifold/issues/281">#281</a>: IntelliJ 2021.2 Community Edition: Null Ptr Exceptions
<br>
<a href="https://github.com/manifold-systems/manifold/issues/279">#279</a>: GraphQL: Bearer Authorization broken when calling graphQL server
<br>
<a href="https://github.com/manifold-systems/manifold/issues/277">#277</a>: GraphQL: Add support for processing the raw GraphQL response to access custom key/value pairs etc.
<br>
<a href="https://github.com/manifold-systems/manifold/issues/276">#276</a>: manifold-graphql: support a built-in "JSON" scalar
<br>
<a href="https://github.com/manifold-systems/manifold/issues/273">#273</a>: IJ plugin: revise logic for protected property access
<br>
<a href="https://github.com/manifold-systems/manifold/issues/270">#270</a>: don't pollute compiler output with warnings from generated code, particularly relevant with `-Xlint:all` usage
<br>
<a href="https://github.com/manifold-systems/manifold/issues/268">#268</a>: manifold-strings: provide javac command line option to exclude simple `$foo` syntax from processing while still allowing `${foo}`
<br>
<a href="https://github.com/manifold-systems/manifold/issues/173">#173</a>: Fix race condition
<br>
<a href="https://github.com/manifold-systems/manifold/issues/255">#255</a>: Fix issues with JDK 16 compatibility and manifold-props
<br>
<a href="https://github.com/manifold-systems/manifold/issues/254">#254</a>: Inferred property silently shadows local captured reference from anonymous context
<br>
<a href="https://github.com/manifold-systems/manifold/issues/253">#253</a>: using manifold-props with AWT/Swing app, cannot find symbols in sun.awt.util
<br>
<a href="https://github.com/manifold-systems/manifold/issues/251">#251</a>: prevent "error: Xxx is not a repeatable annotation type" esp. jetbrains NotNull, Nullable
<br>
<a href="https://github.com/manifold-systems/manifold/issues/248">#248</a>: GraphQL: improve support for custom scalar types
<br>
<a href="https://github.com/manifold-systems/manifold/issues/243">#243</a>: GraphQL: provide type-safe access to result data from GqlRequestException
<br>
<a href="https://github.com/manifold-systems/manifold/issues/242">#242</a>: Properties language support for Java (@var, @val, @set)
<br>
<a href="https://github.com/manifold-systems/manifold/issues/241">#241</a>: GraphQL: add simple Config API to manage system-level configuration options, RemoveNullConstraintValues added
<br>
<a href="https://github.com/manifold-systems/manifold/issues/240">#240</a>: support structural interfaces dynamically without having `manifold-ext` dependency at runtime
<br>
<a href="https://github.com/manifold-systems/manifold/issues/239">#239</a>: don't insert bootstrap in interfaces
<br>
<a href="https://github.com/manifold-systems/manifold/issues/238">#238</a>: Support Java 16
<br>
<a href="https://github.com/manifold-systems/manifold/issues/237">#237</a>: issue a compiler warning when an extension method conflicts with an extended class or another extension
<br>
<a href="https://github.com/manifold-systems/manifold/issues/236">#236</a>: handle case where Gradle uses a DelegatingJavaFileManager
<br>
<a href="https://github.com/manifold-systems/manifold/issues/235">#235</a>: GraphQL: report the duplication error directly as an error in the .gql file
<br>
<a href="https://github.com/manifold-systems/manifold/issues/230">#230</a>: JEP 305 ('Pattern Matching for instanceof') IJ plugin support
<br>
<a href="https://github.com/manifold-systems/manifold/issues/229">#229</a>: Add support for simpler Map creation using `mapOf` extension method with new `and` binder expressions
<br>
<a href="https://github.com/manifold-systems/manifold/issues/228">#228</a>: java.lang.IllegalArgumentException: URI has an authority component at startup
<br>
<a href="https://github.com/manifold-systems/manifold/issues/227">#227</a>: Fix warnings where a variable referenced exclusively in string interpolation was marked as "never used"
<br>
<a href="https://github.com/manifold-systems/manifold/issues/126">#126</a>: Implement additional operator overloading for index/subscript operator, compound assignment operators, and increment/decrement operators
<br>
<a href="https://github.com/manifold-systems/manifold/issues/223">#223</a>: IntelliJ plugin: account for IntelliJ's internal Array type as a pseudo generic type
<br>
<a href="https://github.com/manifold-systems/manifold/issues/222">#222</a>: Compiler: Fatal error processing with Manifold type processor: manifold.ext.ExtensionManifold on type: _temp_._Manifold_Temp_Main_
<br>
<a href="https://github.com/manifold-systems/manifold/issues/208">#208</a>: `withBearerAuthorization` does not populate correct Authorization header value
<br>
<a href="https://github.com/manifold-systems/manifold/issues/209">#209</a>: Patched classes via --patch-module are ignored
<br>
<a href="https://github.com/manifold-systems/manifold/issues/212">#212</a>: Ensure annotator runs in read action
<br>
<a href="https://github.com/manifold-systems/manifold/issues/213">#213</a>: Line numbers are wrong for javac reported errors following preprocessor directives
<br>
<a href="https://github.com/manifold-systems/manifold/issues/214">#214</a>: manifold-graphql needs to make its manifold-strings dependency `optional`
<br>
<a href="https://github.com/manifold-systems/manifold/issues/215">#215</a>: Runtime bootstrap should not open compiler jdk module (Java 9+)
<br>
<a href="https://github.com/manifold-systems/manifold/issues/216">#216</a>: Manifold dependencies declared with `provided` or `compileOnly` should instead be used exclusively in the `processorPath`
<br>
Support for <a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-ext#extending-arrays">Array Extensions</a>.
<br>
<a href="https://github.com/manifold-systems/manifold/issues/205">#205</a>: Improve support for @Self, Fix check for already bootstrapped class
<br>
Manifold supports <b>Android Studio</b>!
<br>
Manifold supports <b>Kotlin</b>!
<br>
<a href="https://github.com/manifold-systems/manifold/issues/181">#181</a>: Core: Separate Manifold into compile-time and runtime dependencies, toward support for Android
<br>
<a href="https://github.com/manifold-systems/manifold/issues/186">#186</a>: GraphQL & JSON: Modify GraphQL and JSON APIs to work better with other JVM languages such as Kotlin
<br>
<a href="https://github.com/manifold-systems/manifold/issues/192">#192</a>: Plugin: Fix project context menu behavior when multiple items are selected
<br>
<a href="https://github.com/manifold-systems/manifold/issues/193">#193</a>: Core: Remove runtime requirement for manifold-rt for projects not using extensions
<br>
<a href="https://github.com/manifold-systems/manifold/issues/194">#194</a>: Core: Enable comprehensive Java/Manifold interop with Manifold-enabled languages in a Java 9+ modular build
<br>
Other minor fixes and improvements.
</h4>
    ]]>
  </change-notes>

<!--  <depends>com.intellij.modules.java</depends>-->

  <actions>
    <group id="Manifold.New">
      <action id="Manifold.NewExtensionClass" class="manifold.ij.actions.CreateExtensionMethodsClassAction"/>
      <action id="Manifold.NewTemplate" class="manifold.ij.actions.CreateManifoldTemplateAction"/>
      <add-to-group group-id="NewGroup1" anchor="last"/>
    </group>
    <group id="Manifold.SourceCode">
      <action class="manifold.ij.actions.ViewJavaSourceAction"/>
      <add-to-group group-id="ViewMenu" anchor="after" relative-to-action="QuickActions"/>
    </group>
  </actions>

  <extensions defaultExtensionNs="com.intellij">
    <repositoryLibrary name="Manifold">
      <groupId>systems.manfold</groupId>
      <artifactId>manifold-all</artifactId>
    </repositoryLibrary>

    <ApplicationLoadListener implementation="manifold.ij.core.ManApplicationLoadListener"/>

    <!-- Manifold Core extensions -->

    <!--<projectService serviceInterface="com.intellij.psi.impl.ResolveScopeManager"-->
                    <!--serviceImplementation="manifold.ij.extensions.ManResolveScopeManagerImpl" overrides="true"/>-->
    <projectService serviceInterface="com.intellij.psi.search.PsiSearchHelper"
                    serviceImplementation="manifold.ij.extensions.ManPsiSearchHelperImpl" overrides="true"/>

    <projectService serviceInterface="com.intellij.psi.PsiResolveHelper"
                    serviceImplementation="manifold.ij.extensions.ManPsiResolveHelperImpl" overrides="true"/>
    <projectService serviceInterface="com.intellij.psi.impl.source.resolve.ResolveCache"
                    serviceImplementation="manifold.ij.extensions.ManResolveCache" overrides="true"/>

    <projectService serviceInterface="com.intellij.psi.impl.source.resolve.JavaResolveCache"
                    serviceImplementation="manifold.ij.extensions.ManJavaResolveCache" overrides="true"/>

    <!--  These application service overrides facilitate file fragments -->
    <applicationService serviceInterface="com.intellij.lang.DefaultASTFactory"
                        serviceImplementation="manifold.ij.extensions.ManDefaultASTFactoryImpl" overrides="true"/>
    <applicationService serviceInterface="com.intellij.lang.PsiBuilderFactory"
                        serviceImplementation="manifold.ij.extensions.ManPsiBuilderFactoryImpl" overrides="true"/>

    <!--<library.type implementation="manifold.ij.extensions.ManLibraryType"/>-->

<!--    disabled indefinitely, inconsistent wrt downloading manifold etc.  -->
<!--    <frameworkSupport implementation="manifold.ij.extensions.ManSupportProvider"/>-->
<!--    <framework.type implementation="manifold.ij.extensions.ManFrameworkType"/>-->

    <postStartupActivity implementation="manifold.ij.core.ManStartupActivity" order="first"/>

    <java.elementFinder implementation="manifold.ij.extensions.ManTypeFinder" order="first, before java"/>
    <java.shortNamesCache implementation="manifold.ij.extensions.ManShortNamesCache"/>
    <gotoDeclarationHandler implementation="manifold.ij.extensions.ManGotoDeclarationHandler"/>
    <lang.psiAugmentProvider implementation="manifold.ij.extensions.ManAugmentProvider"/>
    <lang.psiAugmentProvider implementation="manifold.ij.extensions.ManPropertiesAugmentProvider"/>
    <lang.psiAugmentProvider implementation="manifold.ij.extensions.ManDelegationAugmentProvider"/>
    <methodReferencesSearch implementation="manifold.ij.extensions.ExtensionMethodUsageSearcher"/>
    <lang.parserDefinition language="JAVA" implementationClass="manifold.ij.extensions.ManJavaParserDefinition" order="first"/>
    <externalAnnotator language="JAVA" implementationClass="manifold.ij.extensions.DelegationExternalAnnotator"/>
    <externalAnnotator language="JAVA" implementationClass="manifold.ij.extensions.ManPreprocessorAnnotator" order="last"/>
    <annotator language="JAVA" implementationClass="manifold.ij.extensions.ExtensionClassAnnotator"/>
    <annotator language="JAVA" implementationClass="manifold.ij.extensions.ExtensionMethodCallSiteAnnotator"/>
    <annotator language="JAVA" implementationClass="manifold.ij.extensions.PropertiesAnnotator"/>
    <annotator language="JAVA" implementationClass="manifold.ij.extensions.DelegationAnnotator"/>
    <annotator language="JAVA" implementationClass="manifold.ij.extensions.SelfUsageAnnotator"/>
    <annotator language="JAVA" implementationClass="manifold.ij.extensions.JailbreakUsageAnnotator"/>
    <annotator language="JAVA" implementationClass="manifold.ij.extensions.MiscAnnotator"/>
    <daemon.highlightInfoFilter implementation="manifold.ij.extensions.ManHighlightInfoFilter"/>
    <daemon.highlightInfoFilter implementation="manifold.ij.extensions.ManPropertiesHighlightInfoFilter"/>
    <renamePsiElementProcessor implementation="manifold.ij.extensions.RenameTypeManifoldFileProcessor" order="first"/>
    <moveFileHandler implementation="manifold.ij.extensions.MoveTypeManifoldFileProcessor" order="first"/>
    <findUsagesHandlerFactory implementation="manifold.ij.extensions.ManifoldFindUsagesHandlerFactory" order="first"/>
    <lang.findUsagesProvider language="TEXT" implementationClass="manifold.ij.extensions.TextFindUsagesProvider"/>
    <renameHandler implementation="manifold.ij.extensions.ManRenameHandler" order="first"/>
<!--    <useScopeEnlarger implementation="manifold.ij.extensions.ManUseScopeEnlarger" order="first"/>-->
    <renamePsiElementProcessor implementation="manifold.ij.extensions.RenameResourceElementProcessor" order="first"/>
    <renamePsiElementProcessor implementation="manifold.ij.extensions.RenameExtensionMethodProcessor" order="first"/>
    <nameSuggestionProvider implementation="manifold.ij.extensions.ManNameSuggestionProvider" order="first"/>
    <resolveScopeEnlarger implementation="manifold.ij.extensions.ManResolveScopeProvider" order="first"/>
    <elementDescriptionProvider implementation="manifold.ij.extensions.ManElementDescriptionProvider"/>
    <languageInjector implementation="manifold.ij.extensions.ManCommentFragmentInjector" order="first"/>
    <languageInjector implementation="manifold.ij.extensions.ManStringFragmentInjector" order="first"/>
    <languageInjector implementation="manifold.ij.extensions.ManStringLiteralTemplateInjector" order="first"/>
    <implicitUsageProvider implementation="manifold.ij.extensions.ManStringLiteralTemplateUsageProvider"/>
    <targetElementEvaluator language="TEXT" implementationClass="manifold.ij.extensions.ManTextElementEvaluator"/>
    <completion.contributor language="JAVA" implementationClass="manifold.ij.extensions.ManJavaCompletionContributor" order="first"/>
    <iconProvider implementation="manifold.ij.extensions.PropertiesIconProvider"/>
    <highlightVisitor implementation="manifold.ij.extensions.ManHighlightVisitor"/>
    <psi.treeChangeListener implementation="manifold.ij.extensions.GraphQlConfigTreeChangeListener"/>

    <applicationConfigurable instance="manifold.ij.extensions.ManConfigurable"/>

    <!-- ManJavaSyntaxHighlighterFactory exists solely so we can include '$' as an escapable for String literal templates
         see ManJavaFileHighlighter -->
    <lang.syntaxHighlighterFactory language="JAVA" implementationClass="manifold.ij.extensions.ManJavaSyntaxHighlighterFactory" order="first"/>

    <!-- This enables the ManBuilderService and dynamically configures the classpath (includes manifold-jps-plugin.jar etc.) -->
    <buildProcess.parametersProvider implementation="manifold.ij.jps.ManBuildClasspathProvider"/>
    <compileServer.plugin classpath=""/>

    <!-- Manifold Template extensions -->

    <fileType name="ManTL" language="ManTL" extensions="mtl" implementationClass="manifold.ij.template.ManTemplateFileType"/>
    <lang.parserDefinition language="ManTemplateJava" implementationClass="manifold.ij.template.psi.ManTemplateJavaParserDefinition"/>
    <lang.treePatcher language="ManTemplateJava" implementationClass="manifold.ij.template.ManTreePatcher"/>
    <lang.parserDefinition language="ManTL" implementationClass="manifold.ij.template.psi.ManTemplateParserDefinition"/>
    <lang.syntaxHighlighterFactory language="ManTL" implementationClass="manifold.ij.template.ManTemplateHighlighterFactory"/>
    <lang.fileViewProviderFactory language="ManTL" implementationClass="manifold.ij.template.ManTemplateFileViewProviderFactory" order="first"/>
    <annotator language="ManTL" implementationClass="manifold.ij.template.ManTemplateAnnotator"/>
    <annotator language="JAVA" implementationClass="manifold.ij.template.ManTemplateJavaAnnotator"/>
    <daemon.highlightInfoFilter implementation="manifold.ij.template.ManTemplateHighlightInfoFilter"/>
    <colorSettingsPage implementation="manifold.ij.template.ManTemplateColorSettingsPage"/>
    <lang.commenter language="ManTL" implementationClass="manifold.ij.template.ManTemplateCommenter"/>
    <typedHandler implementation="manifold.ij.template.ManTemplateTypedHandler"/>
    <enterHandlerDelegate implementation="manifold.ij.template.psi.ManTemplateEnterHandler"/>
  </extensions>

</idea-plugin>
