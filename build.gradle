/*
 *
 *  * Copyright (c) 2022 - Manifold Systems LLC
 *  *
 *  * Licensed under the Apache License, Version 2.0 (the "License");
 *  * you may not use this file except in compliance with the License.
 *  * You may obtain a copy of the License at
 *  *
 *  *       http://www.apache.org/licenses/LICENSE-2.0
 *  *
 *  * Unless required by applicable law or agreed to in writing, software
 *  * distributed under the License is distributed on an "AS IS" BASIS,
 *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  * See the License for the specific language governing permissions and
 *  * limitations under the License.
 *
 *
 */

import org.gradle.api.tasks.testing.logging.TestLogEvent
import java.util.concurrent.TimeUnit

plugins {
  id 'org.jetbrains.intellij' version '1.16.0'
}

description = 'Manifold :: IJ'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

configurations {
  manifoldAll
  manifoldEp
}

allprojects {
  repositories {
    if(!System.getenv('CI')) {
      mavenLocal()
    }
    mavenCentral()
    maven {
      url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    gradlePluginPortal()
  }

  // this test block fixes an IJ 2021.3 issue where it won't run tests
  test {
    scanForTestClasses false
    include "**/*Test.class"
  }

  apply plugin: 'java'
  apply plugin: 'org.jetbrains.intellij'
}

File destDir = jar.destinationDir
subprojects {
  tasks.withType( Jar ) {
    // make the manifold-jps-plugin.jar file go in this plugin's dir
    destinationDir = file(destDir)
  }
}

jar {
  manifest {
    attributes(
      'Contains-Sources': 'darkj'
    )
  }
}

dependencies {
  implementation group: 'systems.manifold', name: 'manifold', version: manifoldVersion
  implementation group: 'systems.manifold', name: 'manifold-util', version: manifoldVersion
  implementation group: 'systems.manifold', name: 'manifold-darkj', version: manifoldVersion
  implementation group: 'systems.manifold', name: 'manifold-image', version: manifoldVersion
  implementation group: 'systems.manifold', name: 'manifold-ext', version: manifoldVersion
  implementation group: 'systems.manifold', name: 'manifold-props', version: manifoldVersion
  implementation group: 'systems.manifold', name: 'manifold-params-rt', version: manifoldVersion
  implementation group: 'systems.manifold', name: 'manifold-delegation', version: manifoldVersion
  implementation group: 'systems.manifold', name: 'manifold-strings', version: manifoldVersion
  implementation group: 'systems.manifold', name: 'manifold-exceptions', version: manifoldVersion
  implementation group: 'systems.manifold', name: 'manifold-preprocessor', version: manifoldVersion
  implementation group: 'systems.manifold', name: 'manifold-xml-rt', version: manifoldVersion

  testImplementation group: 'junit', name: 'junit', version: '4.12'

  manifoldAll group: 'systems.manifold', name: 'manifold-all', version: manifoldVersion
  manifoldEp group: 'systems.manifold', name: 'manifold-ext-producer-sample', version: manifoldVersion

  // this is for manifold-sql where use of hikari brings in slf4j
  // if we don't add the nop here, hikari's exception logging looks like unhandled exceptions that IJ reports as manifold errors
  implementation 'org.slf4j:slf4j-api:2.0.3'

  implementation project('jps-plugin')
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, TimeUnit.SECONDS //always check for new SNAPSHOTs
}

compileJava {
  options.compilerArgs += ['-proc:none', '-Xplugin:Manifold no-bootstrap']
}
compileTestJava {
  options.compilerArgs += ['-proc:none', '-Xplugin:Manifold']
}

String getIjVersion() {
  return System.getProperty('ijVersion') ?: defaultIjVersion
}

intellij {
  pluginName = project.name
  version = getIjVersion()
  plugins = ['com.intellij.java', 'com.intellij.modules.json'] //, 'com.intellij.lang.jsgraphql:3.0.0']
}

runIde {
  minHeapSize = '1g'
  maxHeapSize = '4g'
// uncomment to override the ide that is run
//  ideDir = new File("C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4")
}

patchPluginXml {
  // Get build numbers from https://www.jetbrains.com/idea/download/other.html
  sinceBuild = '241'   //2024.1
  untilBuild = '243.*' //2024.3.*
}

buildSearchableOptions {
  enabled = false
}

test {
  //uncomment below to show stdout/stderr in console
  //testLogging.showStandardStreams = true
  testLogging {
    events = [TestLogEvent.PASSED, TestLogEvent.FAILED, TestLogEvent.SKIPPED]
  }

  //set a system property in the test JVM containing the path to manifold-all (it could be under ~/.gradle/caches or ~/.m2/repository)
  systemProperties = ['path.to.manifold.all':project.configurations.manifoldAll.singleFile.absolutePath,
                      'path.to.manifold.ep':project.configurations.manifoldEp.files.first()]
}
